/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package snake

import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.async
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking

enum class Direction {
    UP,
    DOWN,
    LEFT,
    RIGHT,
}

class Point(var x: Int, var y: Int)

class Snake {
    var direction: Direction
    var position: Point

    init {
        direction = Direction.RIGHT
        position = Point(8, 8)
    }

    fun move() {
        when (direction) {
            Direction.UP -> position.y -= 1
            Direction.DOWN -> position.y += 1
            Direction.LEFT -> position.x -= 1
            Direction.RIGHT -> position.x += 1
        }
    }
}

class Apple {
    val position: Point

    init {
        position = Point(10, 8)
    }

    fun spawn() {
        position.x = (1..30 - 1).random()
        position.y = (1..15 - 1).random()
    }
}

class Board(val height: Int, val width: Int) {
    val snake: Snake

    val apple: Apple
    var score = 0

    init {
        apple = Apple()
        snake = Snake()
    }
    // this function is used to show the board
    fun render() {
        println("Apple X: ${apple.position.x}, Y: ${apple.position.y}")
        println("Snake X: ${snake.position.x}, Y: ${snake.position.y}")

        for (_i in 0..width) print("⬜")

        for (row in 0..height - 2) {

            println()
            print("⬜")

            for (col in 0..width - 2) {
                if (row == snake.position.y && col == snake.position.x) {
                    print("🐍")
                } else if (row == apple.position.y && col == apple.position.x) {
                    print("🍎")
                } else {

                    print("⬛")
                }
            }
            print("⬜")
        }

        println()
        for (_i in 0..width) print("⬜")
    }

    fun isEaten(): Boolean {
        return snake.position.x == apple.position.x && snake.position.y == apple.position.y
    }
}

fun main() {
    val board = Board(15, 30)

    runBlocking {
        launch {
            while (true) {
                delay(900L)
                print("\u001b[H\u001b[2J")
                board.snake.move()

                if (board.isEaten()) {
                    board.score += 1
                    board.apple.spawn()
                }
                println("Score: ${board.score}")
                board.render()
            }
        }
        launch {
            while (true) {
                var character = GlobalScope.async { readln() }.await()

                board.snake.direction =
                        when (character.lowercase()) {
                            "w" -> Direction.UP
                            "a" -> Direction.LEFT
                            "s" -> Direction.DOWN
                            "d" -> Direction.RIGHT
                            else -> board.snake.direction
                        }
            }
        }
    }
}
